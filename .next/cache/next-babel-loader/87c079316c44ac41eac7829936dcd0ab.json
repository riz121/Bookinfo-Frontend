{"ast":null,"code":"var _jsxFileName = \"/Users/rizwanahmed/Documents/node /Bookinfo-Frontend/components/Modal.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport cx from \"clsx\";\nimport { CheckSVG, CloseSVG } from \"@/icons\";\nimport { addbookinfo, setModalOpen, setSelectedbookinfo, updatebookinfo } from \"@/store\";\nimport { useState } from \"react\";\nexport function Modal() {\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue\n  } = useForm();\n  const state = useSelector(state => state.bookinfo);\n  const viewMode = useSelector(state => state.bookinfo.viewMode);\n  const dispatch = useDispatch();\n\n  const closeModal = () => {\n    reset();\n    dispatch(setModalOpen(false));\n    dispatch(setSelectedbookinfo(undefined));\n    dispatch({\n      type: \"bookinfo_SELECTED_VIEW\",\n      payload: false\n    }); // Reset view mode\n  };\n\n  const onSubmitHandler = data => {\n    if (data) {\n      closeModal();\n    }\n\n    if (state.selectedbookinfo) {\n      dispatch(updatebookinfo(_objectSpread({\n        _id: state.selectedbookinfo._id\n      }, data)));\n    } else {\n      dispatch(addbookinfo(data));\n    }\n  };\n\n  useEffect(() => {\n    if (state.selectedbookinfo) {\n      var _state$selectedbookin;\n\n      setValue(\"title\", state.selectedbookinfo.title);\n      setValue(\"isbn\", state.selectedbookinfo.isbn);\n      setValue(\"qty\", state.selectedbookinfo.qty);\n      setValue(\"author\", ((_state$selectedbookin = state.selectedbookinfo.author) === null || _state$selectedbookin === void 0 ? void 0 : _state$selectedbookin.name) || \"\");\n    }\n  }, [state.selectedbookinfo, setValue]);\n  const isReadOnly = state.viewMode;\n  return state.isModalOpen ? /*#__PURE__*/ReactDOM.createPortal(__jsx(\"div\", {\n    className: \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"modal__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }\n  }, __jsx(\"header\", {\n    className: \"header modal__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"header__h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }, state.viewMode ? __jsx(React.Fragment, null, \"View \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }\n  }, \"Book\")) : state.selectedbookinfo ? __jsx(React.Fragment, null, \"Edit \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, \"Book\")) : __jsx(React.Fragment, null, \"Add \", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 18\n    }\n  }, \"Book\"))), __jsx(\"button\", {\n    className: \"btn btn__compact btn__close\",\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }\n  }, __jsx(CloseSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }))), __jsx(\"form\", {\n    className: \"form modal__form\",\n    onSubmit: handleSubmit(onSubmitHandler),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    className: cx(\"label\", errors.title && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, errors.title ? \"Title is required!\" : __jsx(React.Fragment, null, \"Title\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 56\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    placeholder: \"Title\",\n    disabled: isReadOnly,\n    className: cx(\"input\", errors.title && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    className: cx(\"label\", errors.isbn && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, errors.isbn ? \"Isbn is required!\" : __jsx(React.Fragment, null, \"Isbn\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 53\n    }\n  }, \"*\"))), __jsx(\"textarea\", {\n    name: \"isbn\",\n    placeholder: \"Isbn\",\n    disabled: isReadOnly,\n    className: cx(\"area\", errors.isbn && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    className: cx(\"label\", errors.qty && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, errors.qty ? \"Qty is required!\" : __jsx(React.Fragment, null, \"Qty\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 50\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"text\",\n    name: \"qty\",\n    placeholder: \"Qty\",\n    disabled: isReadOnly,\n    className: cx(\"input\", errors.qty && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 8\n    }\n  }, __jsx(\"label\", {\n    className: cx(\"label\", errors.author && \"label--error\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, errors.author ? \"Author is required!\" : __jsx(React.Fragment, null, \"Author\", __jsx(\"span\", {\n    className: \"label__required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 59\n    }\n  }, \"*\"))), __jsx(\"input\", {\n    type: \"text\",\n    name: \"author\",\n    placeholder: \"Author\",\n    disabled: isReadOnly,\n    className: cx(\"input\", errors.author && \"input--error\"),\n    ref: register({\n      required: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"form__action\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 8\n    }\n  }, __jsx(\"button\", {\n    className: \"btn btn__icon btn__cancel\",\n    type: \"button\",\n    onClick: closeModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(CloseSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 10\n    }\n  }), \" Close\"), !viewMode && __jsx(\"button\", {\n    className: \"btn btn__primary btn__icon\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 3\n    }\n  }, __jsx(CheckSVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }\n  }), \" \", state.selectedbookinfo ? \"Update\" : \"Submit\"))))), document.body) : null;\n}","map":{"version":3,"sources":["/Users/rizwanahmed/Documents/node /Bookinfo-Frontend/components/Modal.js"],"names":["useEffect","ReactDOM","useDispatch","useSelector","useForm","cx","CheckSVG","CloseSVG","addbookinfo","setModalOpen","setSelectedbookinfo","updatebookinfo","useState","Modal","currentPage","setCurrentPage","register","handleSubmit","errors","reset","setValue","state","bookinfo","viewMode","dispatch","closeModal","undefined","type","payload","onSubmitHandler","data","selectedbookinfo","_id","title","isbn","qty","author","name","isReadOnly","isModalOpen","createPortal","required","document","body"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport cx from \"clsx\";\n\nimport { CheckSVG, CloseSVG } from \"@/icons\";\nimport {\n\taddbookinfo,\n\tsetModalOpen,\n\tsetSelectedbookinfo,\n\tupdatebookinfo,\n} from \"@/store\";\nimport { useState } from \"react\";\n\n\n\nexport function Modal() {\n\tconst [currentPage, setCurrentPage] = useState(1); \n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\terrors,\n\t\treset,\n\t\tsetValue,\n\t} = useForm();\n\n\tconst state = useSelector((state) => state.bookinfo);\n\tconst viewMode = useSelector((state) => state.bookinfo.viewMode);\n\tconst dispatch = useDispatch();\n\n\tconst closeModal = () => {\n\t\treset();\n\t\tdispatch(setModalOpen(false));\n\t\tdispatch(setSelectedbookinfo(undefined));\n\t\tdispatch({ type: \"bookinfo_SELECTED_VIEW\", payload: false }); // Reset view mode\n\t};\n\n\tconst onSubmitHandler = (data) => {\n\t\tif (data) {\n\t\t\tcloseModal();\n\t\t}\n\t\tif (state.selectedbookinfo) {\n\t\t\tdispatch(updatebookinfo({ _id: state.selectedbookinfo._id, ...data }));\n\n\t\t} else {\n\t\t\tdispatch(addbookinfo(data));\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (state.selectedbookinfo) {\n\t\t\tsetValue(\"title\", state.selectedbookinfo.title);\n\t\t\tsetValue(\"isbn\", state.selectedbookinfo.isbn);\n\t\t\tsetValue(\"qty\", state.selectedbookinfo.qty);\n\t\t\tsetValue(\"author\", state.selectedbookinfo.author?.name || \"\");\n\t\t}\n\t}, [state.selectedbookinfo, setValue]);\n\n\tconst isReadOnly = state.viewMode;\n\n\treturn state.isModalOpen\n\t\t? ReactDOM.createPortal(\n\t\t\t\t<div className=\"modal\">\n\t\t\t\t\t<div className=\"modal__content\">\n\t\t\t\t\t\t<header className=\"header modal__header\">\n\t\t\t\t\t\t\t<h1 className=\"header__h2\">\n\t\t\t\t\t\t\t\t{state.viewMode\n\t\t\t\t\t\t\t\t\t? <>View <span>Book</span></>\n\t\t\t\t\t\t\t\t\t: state.selectedbookinfo\n\t\t\t\t\t\t\t\t\t? <>Edit <span>Book</span></>\n\t\t\t\t\t\t\t\t\t: <>Add <span>Book</span></>}\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn__compact btn__close\"\n\t\t\t\t\t\t\t\tonClick={closeModal}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CloseSVG />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</header>\n\n\t\t\t\t\t\t<form\n\t\t\t\t\t\t\tclassName=\"form modal__form\"\n\t\t\t\t\t\t\tonSubmit={handleSubmit(onSubmitHandler)}\n\t\t\t\t\t\t\tnoValidate\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label className={cx(\"label\", errors.title && \"label--error\")}>\n\t\t\t\t\t\t\t\t\t{errors.title ? \"Title is required!\" : <>Title<span className=\"label__required\">*</span></>}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\t\t\t\tdisabled={isReadOnly}\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.title && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label className={cx(\"label\", errors.isbn && \"label--error\")}>\n\t\t\t\t\t\t\t\t\t{errors.isbn ? \"Isbn is required!\" : <>Isbn<span className=\"label__required\">*</span></>}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\tname=\"isbn\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Isbn\"\n\t\t\t\t\t\t\t\t\tdisabled={isReadOnly}\n\t\t\t\t\t\t\t\t\tclassName={cx(\"area\", errors.isbn && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label className={cx(\"label\", errors.qty && \"label--error\")}>\n\t\t\t\t\t\t\t\t\t{errors.qty ? \"Qty is required!\" : <>Qty<span className=\"label__required\">*</span></>}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"qty\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Qty\"\n\t\t\t\t\t\t\t\t\tdisabled={isReadOnly}\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.qty && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__element\">\n\t\t\t\t\t\t\t\t<label className={cx(\"label\", errors.author && \"label--error\")}>\n\t\t\t\t\t\t\t\t\t{errors.author ? \"Author is required!\" : <>Author<span className=\"label__required\">*</span></>}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"author\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Author\"\n\t\t\t\t\t\t\t\t\tdisabled={isReadOnly}\n\t\t\t\t\t\t\t\t\tclassName={cx(\"input\", errors.author && \"input--error\")}\n\t\t\t\t\t\t\t\t\tref={register({ required: true })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"form__action\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn__icon btn__cancel\"\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tonClick={closeModal}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseSVG /> Close\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t{!viewMode && (\n\t\t<button className=\"btn btn__primary btn__icon\" type=\"submit\">\n\t\t\t<CheckSVG /> {state.selectedbookinfo ? \"Update\" : \"Submit\"}\n\t\t</button>\n\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>,\n\t\t\t\tdocument.body\n\t\t\t)\n\t\t: null;\n}\n"]},"metadata":{},"sourceType":"module"}