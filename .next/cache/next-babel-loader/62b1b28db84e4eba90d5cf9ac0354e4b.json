{"ast":null,"code":"import { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\nconst apiUrl = process.env.BACKEND_URL;\n\nfunction* fetchbookinfos() {\n  try {\n    console.log(\"test\");\n    const response = yield fetch(apiUrl + \"/books/\");\n    const bookinfoList = yield response.json();\n    console.log(\"bookinfoList\", bookinfoList);\n    yield put({\n      type: t.bookinfo_FETCH_SUCCEEDED,\n      payload: bookinfoList\n    });\n  } catch (error) {\n    yield put({\n      type: t.bookinfo_FETCH_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchFetchbookinfos() {\n  yield takeLatest(t.bookinfo_FETCH_REQUESTED, fetchbookinfos);\n}\n\nfunction* addbookinfo(action) {\n  try {\n    var _action$payload, _action$payload2, _action$payload3, _action$payload4;\n\n    console.log(\"action\", action);\n    const body = {\n      title: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.title) || \"\",\n      isbn: ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.isbn) || \"\",\n      qty: ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.qty) || \"\",\n      author: {\n        name: ((_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.author) || \"\"\n      }\n    };\n    const response = yield fetch(\"http://localhost:3001/api/v1/books\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const newbookinfo = yield response.json();\n    yield put({\n      type: t.bookinfo_ADD_SUCCEEDED,\n      payload: newbookinfo\n    });\n  } catch (error) {\n    yield put({\n      type: t.bookinfo_ADD_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchAddbookinfo() {\n  yield takeLatest(t.bookinfo_ADD_REQUESTED, addbookinfo);\n}\n\nfunction* deletebookinfo(action) {\n  try {\n    const response = yield fetch(\"http://localhost:3001/api/v1/books/\" + action.payload, {\n      method: \"DELETE\"\n    });\n    const deletedbookinfo = yield response.json({\n      message: \"Record was deleted\"\n    });\n    yield put({\n      type: t.bookinfo_DELETE_SUCCEEDED,\n      payload: deletedbookinfo.id\n    });\n  } catch (error) {\n    yield put({\n      type: t.bookinfo_DELETE_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchRemovebookinfo() {\n  yield takeLatest(t.bookinfo_DELETE_REQUESTED, deletebookinfo);\n}\n\nfunction* updatebookinfo(action) {\n  try {\n    var _action$payload5, _action$payload6, _action$payload7, _action$payload8;\n\n    const body = {\n      title: ((_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.title) || \"\",\n      isbn: ((_action$payload6 = action.payload) === null || _action$payload6 === void 0 ? void 0 : _action$payload6.isbn) || \"\",\n      qty: ((_action$payload7 = action.payload) === null || _action$payload7 === void 0 ? void 0 : _action$payload7.qty) || \"\",\n      author: {\n        name: ((_action$payload8 = action.payload) === null || _action$payload8 === void 0 ? void 0 : _action$payload8.author) || \"\"\n      }\n    };\n    const response = yield fetch(\"http://localhost:3001/api/v1/books/\" + action.payload._id, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    const updatedbookinfo = yield response.json({\n      message: \"Record has been Updated\"\n    });\n    yield put({\n      type: t.bookinfo_UPDATE_SUCCEEDED,\n      payload: updatedbookinfo\n    });\n  } catch (error) {\n    yield put({\n      type: t.bookinfo_UPDATE_FAILED,\n      payload: error.message\n    });\n  }\n}\n\nfunction* watchUpdatebookinfo() {\n  yield takeLatest(t.bookinfo_UPDATE_REQUESTED, updatebookinfo);\n}\n\nexport default function* rootSaga() {\n  yield all([watchFetchbookinfos(), watchAddbookinfo(), watchRemovebookinfo(), watchUpdatebookinfo()]);\n}","map":{"version":3,"sources":["/Users/rizwanahmed/Documents/node /Bookinfo-Frontend/store/sagas/bookinfo.js"],"names":["all","put","takeLatest","t","apiUrl","process","env","BACKEND_URL","fetchbookinfos","console","log","response","fetch","bookinfoList","json","type","bookinfo_FETCH_SUCCEEDED","payload","error","bookinfo_FETCH_FAILED","message","watchFetchbookinfos","bookinfo_FETCH_REQUESTED","addbookinfo","action","body","title","isbn","qty","author","name","method","headers","JSON","stringify","newbookinfo","bookinfo_ADD_SUCCEEDED","bookinfo_ADD_FAILED","watchAddbookinfo","bookinfo_ADD_REQUESTED","deletebookinfo","deletedbookinfo","bookinfo_DELETE_SUCCEEDED","id","bookinfo_DELETE_FAILED","watchRemovebookinfo","bookinfo_DELETE_REQUESTED","updatebookinfo","_id","updatedbookinfo","bookinfo_UPDATE_SUCCEEDED","bookinfo_UPDATE_FAILED","watchUpdatebookinfo","bookinfo_UPDATE_REQUESTED","rootSaga"],"mappings":"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","sourcesContent":["import { all, put, takeLatest } from \"redux-saga/effects\";\nimport * as t from \"../types\";\n\nconst apiUrl = process.env.BACKEND_URL;\n\nfunction* fetchbookinfos() {\n\ttry {\n\t\tconsole.log(\"test\")\n\t\tconst response = yield fetch(apiUrl + \"/books/\");\n\t\n\t\tconst bookinfoList = yield response.json();\n\n\t\tconsole.log(\"bookinfoList\",bookinfoList)\n\n\t\tyield put({\n\t\t\ttype: t.bookinfo_FETCH_SUCCEEDED,\n\t\t\tpayload: bookinfoList,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\t\n\t\t\ttype: t.bookinfo_FETCH_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchFetchbookinfos() {\n\tyield takeLatest(t.bookinfo_FETCH_REQUESTED, fetchbookinfos);\n}\n\nfunction* addbookinfo(action) {\n\ttry {\n\t\tconsole.log(\"action\",action)\n\t\tconst body = {\n\t\t\ttitle: action.payload?.title || \"\",\n\t\t\tisbn: action.payload?.isbn || \"\",\n\t\t\tqty: action.payload?.qty || \"\",\n\t\t\tauthor: {\n\t\t\t  name: action.payload?.author || \"\",\n\t\t\t},\n\t\t  };\n\t\t  \n\t\t  const response = yield fetch(\"http://localhost:3001/api/v1/books\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"Accept\": \"application/json\"\n\t\t\t  },\n\t\t\tbody: JSON.stringify(body),\n\t\t  });\n\n\t\tconst newbookinfo = yield response.json();\n\n\t\tyield put({\n\t\t\ttype: t.bookinfo_ADD_SUCCEEDED,\n\t\t\tpayload: newbookinfo,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.bookinfo_ADD_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchAddbookinfo() {\n\tyield takeLatest(t.bookinfo_ADD_REQUESTED, addbookinfo);\n}\n\nfunction* deletebookinfo(action) {\n\ttry {\n\t\tconst response = yield fetch(\"http://localhost:3001/api/v1/books/\" + action.payload, {\n\t\t\tmethod: \"DELETE\",\n\t\t});\n\n\t\tconst deletedbookinfo = yield response.json({message:\"Record was deleted\"});\n\t\t\n\n\t\tyield put({\n\t\t\ttype: t.bookinfo_DELETE_SUCCEEDED,\n\t\t\tpayload: deletedbookinfo.id,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.bookinfo_DELETE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchRemovebookinfo() {\n\tyield takeLatest(t.bookinfo_DELETE_REQUESTED, deletebookinfo);\n}\n\nfunction* updatebookinfo(action) {\n\ttry {\n\t\tconst body = {\n\t\t\ttitle: action.payload?.title || \"\",\n\t\t\tisbn: action.payload?.isbn || \"\",\n\t\t\tqty: action.payload?.qty || \"\",\n\t\t\tauthor: {\n\t\t\t  name: action.payload?.author || \"\",\n\t\t\t},\n\t\t  };\n\t\tconst response = yield fetch(\"http://localhost:3001/api/v1/books/\" + action.payload._id, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"Accept\": \"application/json\"\n\t\t\t  },\n\t\t\tbody: JSON.stringify(body),\n\t\t});\n\n\t\tconst updatedbookinfo = yield response.json({ message :\"Record has been Updated\"});\n\n\t\tyield put({\n\t\t\ttype: t.bookinfo_UPDATE_SUCCEEDED,\n\t\t\tpayload: updatedbookinfo,\n\t\t});\n\t} catch (error) {\n\t\tyield put({\n\t\t\ttype: t.bookinfo_UPDATE_FAILED,\n\t\t\tpayload: error.message,\n\t\t});\n\t}\n}\n\nfunction* watchUpdatebookinfo() {\n\tyield takeLatest(t.bookinfo_UPDATE_REQUESTED, updatebookinfo);\n}\n\nexport default function* rootSaga() {\n\tyield all([\n\t\twatchFetchbookinfos(),\n\t\twatchAddbookinfo(),\n\t\twatchRemovebookinfo(),\n\t\twatchUpdatebookinfo(),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}